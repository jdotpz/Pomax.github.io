{"title":"","author":"Pomax","content":"#Keeping things https\n\nI hate mixed content. Properly. If there was a button I could press that forced browsers to reset to a \"pre mixed-content\" world, I'd press it twice.\n\nFirst of all, I understand what SSL connections offer in terms of security, but I also know what they don't.  What they do, is offer in-transit protection of data. If I request resource X from server Y, then that's usually over a good ten or more \"hops\". On a non-secured connection, anyone who happens to see the data fly by can modify that data and then send on the modified data instead of the original.\n\nThat's potentially bad: someone could change aJS library you're using to snoop for session information and send it to a aggregation service, for instance. Using a secured connection, that's impossible to do (sort of) because the data being sent back and forth is encrypted. In order to modify that JS library, a third party now needs to first decode the response from the server, modify it, and then reencode it with the same set of \"keys\". Impossible, right?\n\nWell, no. If that third party was listening the entire time, they have the entire agreement your browser made with the remote server, including the keys you exchanged, and the encryption protocol you agreed on.  And simply by being properly malicious, rather than half-heartedly so, the concept of \"https enforcement\" has been defeated. The idea that a \"man in the middle\" is only going to be looking for packets being sent for \"something that can be modified for great evil\" is nonsense. If the machine between you and the server you talk to is compromised, you can be sure that it's looking at all the packets, and work with full sessions. Why? Because that's where you make crime money. After all, if it doesn't make you money, it's a waste of crime time.\n\nUnfortunately, browsers are made for people who know pretty much absolutely nothing about any of this, and just want to be told their connection is \"secure\", even when it very much isn't. And that brings us to today, where browsers will opt out when they're told to load a webpage over https://, and that webpage tries to load resources (like CSS files, javascript libraries, or even plain images) that are hosted on http:// instead. Thanks to collective ignorance (or rather, thanks to selective knowledge) browsers panic and will show all kinds of warning signs. Like on this blog.\n\nPrevioulsy, I linked to an image that was hosted on one of my other sites. That site is on http, and this blog is on https, and this is the end of the secure world as far as your browser is concerned. The little happy green icon for this URL would turn into a yellow \"warning!\" or red \"OH NO EVERYTHING IS WRONG!\" icon, and people reading the blog would be left wondering why it's insecure. Even when it's really no more or less secure than in the old pre-https days. So, I'm going to have to find a way to add images to my blog in a way that is secure.\n\nAnd that's all a really elaborate lead-up to staying in the spirit of this github blog: I'll be adding an implementation of the HTML drag and drop API so that I can drag images into this blog, and have the underlying JS code automatically accept that binary data, package it as a git commit, and then have that commit pushed to github, so that the image ends up in the pomax.github.io repository, thus making it available as a relative link. Handy? yes. Secure? I think we've established \"no, because https isn't either\". But, is it something I don't even have to think about when I use it? Well, that's the only reason I wrote this blogging software, so: yes =)\n\nNow I just need to find a nice way to implement the same things that [this fiddle](http://jsfiddle.net/JtJ5N/1) does, in a way that's wrapped by a github commit push. Fun times ahead!","tags":["Blog","Github","https","Mixed Content"],"published":1395360750136,"updated":1395363081808}