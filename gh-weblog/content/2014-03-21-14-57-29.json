{"title":"","author":"Pomax","content":"#Making Mozilla Webmaker's Thimble a little better\n\nThe last two weeks I've been working on making Thimble do something that we've wanted it to do for a long time: mixed content proxying. You might not know what that means, but you'll be familiar with what it does if you've ever used Thimble and you used, say, a Flickr image as a CSS background for something. Instead of seeing a nice image background, the browser would go \"this is mixed content, I will not load this\", and there you are.\n\nStuck. \n\nYour normal recourse would be to try to find an https version of the image you were using, but let's be honest: this is ridiculous. We just want an image background, why would you need to find an https version, just load the damn thing already! Well, now we can.\n\nAs of today, Thimble's staging server has been hooked up to a special proxy that can \"relay\" http resources (images, .css files, and .js files) on an https connection, so that you no longer get the mixed content warning, and things just work.\n\nIn terms of technical details, when you use thimble, you're actually using four different services. There's thimble.webmaker.org, there's your browser (which is running thimble code locally on your machine!), there's the thimble preview domain, which is where your page preview is actually running (for very good reasons your preview does **not** run on a webmaker.org domain!) and then there is the mozilla webmaker proxy domain.  If you're logged into webmaker, the thimble code keeps tabs on the HTML you're writing, keeping a lookout for \"http\" resource links.\n\nBefore, when it saw these, it would generate an error and would in no uncertain terms tell you to find either an https link for that resource, or find something else that was on https. Instead, rather than throwing errors, the Thimble code will mark which parts of your sourcecodes are normally-considered-insecure-mixed-content, and rewrites them to links that the webmaker proxy can serve up on https for you. And it'll only do it for the preview and the published make: it's not going to change your source code from what you intended to write, and if you remix or edit your project, you'll see your own code again, not our proxy-rewritten code. That means you can use whatever resources you like, and it'll just work!\n\nEveryone wins!\n\nOf course, there are limitations to what we can do with a proxy solution like this. The most important limitation being that we cannot \"spider\" our way through something: if you link to someone else's .css file, and that css file has links in it to other files, we can't actually see those links, so we can't proxy them.  As a practical example, if you want to use a google webfont, and you used the http:// version of the stylesheet google tells you to use, then the stylesheet itself would load fine, but the stylesheet contains a link to the actual font you wanted inside of it, and that'll still be on http://, and unfortunately (at least in Firefox) that means it'll still seem like things don't work.\n\nSo, what's the take-home message? \n\n- Use whatever images you want inside a `<style>` block!\n- Use whatever javascript library you want to use in a `<script src=\"...\">` call! (although because it's JavaScript, make sure you are at least confident it's the official release, and not a random file that claims to be the lirabry you want on a random website)","tags":["no tags yet"],"published":1395439049236,"updated":1395439703553}